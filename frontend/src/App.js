import React, { useState } from 'react';
import './App.css';

function App() {
    const [isExpert, setIsExpert] = useState(false); // Theo d√µi n·∫øu ng∆∞·ªùi d√πng l√† chuy√™n gia
    const [isMaster, setIsMaster] = useState(false); // Theo d√µi n·∫øu ng∆∞·ªùi d√πng ƒë·∫°t m·ªëc Master

    const tests = [
        { name: "ELITS - Test 1", duration: "10 ph√∫t", questions: 30 },
        { name: "ELITS - Test 2", duration: "15 ph√∫t", questions: 25 },
        { name: "ELITS - Test 3", duration: "12 ph√∫t", questions: 35 },
        { name: "ELITS - Test 4", duration: "10 ph√∫t", questions: 20 },
        { name: "ELITS - Test 5", duration: "20 ph√∫t", questions: 40 },
        { name: "ELITS - Test 6", duration: "15 ph√∫t", questions: 30 },
        { name: "ELITS - Test 7", duration: "12 ph√∫t", questions: 35 },
        { name: "ELITS - Test 8", duration: "10 ph√∫t", questions: 25 },
        { name: "ELITS - Test 9", duration: "20 ph√∫t", questions: 40 },
        { name: "ELITS - Test 10", duration: "15 ph√∫t", questions: 30 },
        { name: "ELITS - Test 11", duration: "10 ph√∫t", questions: 20 },
        { name: "ELITS - Test 12", duration: "18 ph√∫t", questions: 35 },
        { name: "ELITS - Test 13", duration: "12 ph√∫t", questions: 30 },
        { name: "ELITS - Test 14", duration: "10 ph√∫t", questions: 25 },
        { name: "ELITS - Test 15", duration: "20 ph√∫t", questions: 40 }
    ];

    const achievements = [
        {
            name: "Newbie",
            progress: 0,
            total: 5,
            description: "Ho√†n th√†nh 5 b√†i ki·ªÉm tra",
            reward: "Nh·∫≠n m·ªëc Newbie NFT",
        },
        {
            name: "Th·ª±c t·∫≠p sinh",
            progress: 5,
            total: 10,
            description: "Ho√†n th√†nh 10 b√†i ki·ªÉm tra",
            reward: "Nh·∫≠n m·ªëc Th·ª±c t·∫≠p sinh NFT",
        },
        {
            name: "Junior",
            progress: 10,
            total: 15,
            description: "Ho√†n th√†nh 15 b√†i ki·ªÉm tra",
            reward: "Nh·∫≠n m·ªëc Junior NFT",
        },
        {
            name: "Chuy√™n gia",
            progress: 15,
            total: 20,
            description: "Ho√†n th√†nh 20 b√†i ki·ªÉm tra",
            reward: "Nh·∫≠n m·ªëc Chuy√™n gia NFT & quy·ªÅn t·∫°o job nh·ªè phi√™n d·ªãch",
        },
        {
            name: "Master",
            progress: 20,
            total: 25,
            description: "Ho√†n th√†nh 25 b√†i ki·ªÉm tra",
            reward: "Nh·∫≠n m·ªëc Master NFT & quy·ªÅn truy c·∫≠p v√†o c√°c th·ª≠ th√°ch cao c·∫•p",
        },
    ];

    const createJob = () => {
        if (!isExpert) {
            alert('B·∫°n c·∫ßn ƒë·∫°t m·ªëc "Chuy√™n gia" ƒë·ªÉ t·∫°o job nh·ªè phi√™n d·ªãch!');
            return;
        }

        alert('Job phi√™n d·ªãch ƒë√£ ƒë∆∞·ª£c t·∫°o! H·ªá th·ªëng tr·∫£ th∆∞·ªüng ƒë√£ s·∫µn s√†ng!');
    };

    const accessAdvancedFeatures = () => {
        if (!isMaster) {
            alert('B·∫°n c·∫ßn ƒë·∫°t m·ªëc "Master" ƒë·ªÉ truy c·∫≠p c√°c t√≠nh nƒÉng n√¢ng cao!');
            return;
        }

        alert('Truy c·∫≠p t√≠nh nƒÉng n√¢ng cao ƒë√£ ƒë∆∞·ª£c m·ªü!');
    };

    const registerTutor = () => {
        if (!isMaster) {
            alert('B·∫°n c·∫ßn ƒë·∫°t m·ªëc "Master" ƒë·ªÉ ƒëƒÉng k√Ω gia s∆∞ ƒëi d·∫°y!');
            return;
        }

        alert('B·∫°n ƒë√£ ƒëƒÉng k√Ω th√†nh c√¥ng gia s∆∞ ƒëi d·∫°y!');
    };

    const handleAchievement = (achievement) => {
        if (achievement.name === "Chuy√™n gia" && achievement.progress >= achievement.total) {
            setIsExpert(true);
        }

        // Ki·ªÉm tra m·ªëc "Master" v√† m·ªü quy·ªÅn truy c·∫≠p t√≠nh nƒÉng
        if (achievement.name === "Master" && achievement.progress >= achievement.total) {
            setIsMaster(true);
        }
    };

    return (
        <div className="container">
            <h1 className="title">DANH S√ÅCH ƒê·ªÄ THI</h1>
            <div className="test-card-container">
                {tests.map((test, index) => (
                    <div key={index} className="test-card">
                        <h2>{test.name}</h2>
                        <p>üïë {test.duration}</p>
                        <p>üìÑ {test.questions} c√¢u h·ªèi</p>
                        <button className="start-button">L√ÄM B√ÄI</button>
                    </div>
                ))}
            </div>

            <h4 className="title">Th√†nh t√≠ch</h4>
            <div className="achievement-list">
                {achievements.map((achievement, index) => (
                    <div key={index} className="achievement-card">
                        <h3>{achievement.name}</h3>
                        <p>{achievement.description}</p>
                        <div className="progress-bar-container">
                            <div
                                className="progress-bar"
                                style={{ width: `${(achievement.progress / achievement.total) * 100}%` }}
                            ></div>
                        </div>
                        <p>{achievement.progress}/{achievement.total}</p>

                        {achievement.progress >= achievement.total && (
                            <div className="reward">
                                üåü <strong>Quy·ªÅn h·∫°n:</strong> {achievement.reward}
                            </div>
                        )}

                        {achievement.name === "Chuy√™n gia" && achievement.progress >= achievement.total && (
                            <button onClick={createJob} className="create-job-button">
                                T·∫°o Job Phi√™n D·ªãch
                            </button>
                        )}

                        {achievement.name === "Master" && achievement.progress >= achievement.total && (
                            <>/-strong/-heart:>:o:-((:-h <button onClick={accessAdvancedFeatures} className="access-advanced-button">
                                Truy c·∫≠p T√≠nh NƒÉng N√¢ng Cao
                            </button>
                                <button onClick={registerTutor} className="register-tutor-button">
                                    ƒêƒÉng K√Ω Gia S∆∞ ƒêi D·∫°y
                                </button>
                            </>
                        )}
                    </div>
                ))}
            </div>
        </div>
    );
}

export default App;